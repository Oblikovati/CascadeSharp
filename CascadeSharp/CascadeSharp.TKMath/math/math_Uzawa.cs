//---------------------------------------------------------------------
// CascadeSharp
// General Public License V2
//---------------------------------------------------------------------

using System;

namespace CascadeSharp.TKMath.math
{
    //---------------------------------------------------------------------
    //  Class  math_Uzawa
    //---------------------------------------------------------------------
    public sealed class math_Uzawa
    {
        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, double EpsLix, double EpsLic,
            int NbIterations)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, double EpsLix, double EpsLic)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, double EpsLix)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce,
            double EpsLix, double EpsLic, int NbIterations)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce,
            double EpsLix, double EpsLic)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce,
            double EpsLix)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa(math_Uzawa parameter1)
            : base()
        {
            throw new NotImplementedException();
        }

        public math_Uzawa()
        {
            throw new NotImplementedException();
        }

        public bool IsDone()
        {
            throw new NotImplementedException();
        }

        public math_Vector Value()
        {
            throw new NotImplementedException();
        }

        public math_Vector InitialError()
        {
            throw new NotImplementedException();
        }

        public void Duale(math_Vector V)
        {
            throw new NotImplementedException();
        }

        public math_Vector Error()
        {
            throw new NotImplementedException();
        }

        public int NbIterations()
        {
            throw new NotImplementedException();
        }

        public math_Matrix InverseCont()
        {
            throw new NotImplementedException();
        }

        public void Perform(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce,
            double EpsLix, double EpsLic, int NbIterations)
        {
            throw new NotImplementedException();
        }

        public void Perform(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce,
            double EpsLix, double EpsLic)
        {
            throw new NotImplementedException();
        }

        public void Perform(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce,
            double EpsLix)
        {
            throw new NotImplementedException();
        }

        public void Perform(math_Matrix Cont, math_Vector Secont, math_Vector StartingPoint, int Nci, int Nce)
        {
            throw new NotImplementedException();
        }
    }; // class math_Uzawa
}